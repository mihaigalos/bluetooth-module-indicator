Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 bluetooth-module-indicator (0.1-4) xenial; urgency=low
 .
   * Initial release
Author: Mihai Galos <mihaigalos@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- /dev/null
+++ bluetooth-module-indicator-0.1/Drivers/Bluetooth/__init__.py
@@ -0,0 +1 @@
+pass
--- /dev/null
+++ bluetooth-module-indicator-0.1/Drivers/Bluetooth/bluetooth.py
@@ -0,0 +1,48 @@
+# Read() : https://stackoverflow.com/questions/32807781/ble-subscribe-to-notification-using-gatttool-or-bluepy
+# Gread Android app for debugging : LightBlue Explorer.
+
+import bluepy.btle as btle
+
+class MyDelegate(btle.DefaultDelegate):
+    def __init__(self):
+        btle.DefaultDelegate.__init__(self)
+        self.data = ""
+
+    def handleNotification(self, cHandle, data):
+        self.data = data
+
+    def getData(self):
+        return self.data
+
+    def clearData(self):
+        self.data =""
+
+class BluetoothModule:
+    def __init__(self, address):
+        self.peripheral = btle.Peripheral(address)
+
+    def write(self, string_to_write):
+        service = self.peripheral.getServiceByUUID("0000ffe0-0000-1000-8000-00805f9b34fb")
+        characteristic = service.getCharacteristics()[2]
+        characteristic.write(bytes(string_to_write), True)
+
+    def read(self, once=True):
+        delegate = MyDelegate()
+        self.peripheral.setDelegate( delegate )
+        svc = self.peripheral.getServiceByUUID( "0000ffe0-0000-1000-8000-00805f9b34fb")
+        ch = svc.getCharacteristics()[0]
+
+        self.peripheral.writeCharacteristic(ch.valHandle+1, "\x01\x00")
+
+        while True:
+            data = delegate.getData()
+            if once and len(data) > 0:
+                return data
+            if self.peripheral.waitForNotifications(1.0):
+                    continue
+
+
+def try_me():
+    jdy16 = BluetoothModule("3C:A5:39:90:BB:B1")
+    jdy16.write("Foobar")
+    jdy16.read()
--- /dev/null
+++ bluetooth-module-indicator-0.1/Drivers/__init__.py
@@ -0,0 +1 @@
+pass
